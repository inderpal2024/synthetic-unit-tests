For the following html app, generate the jest and jsdom test cases as per the requirements and assumptions given at the end.
Load html from index.html file and use DOMParser to generate document model before each test.

```HTML

<!DOCTYPE html>
<html>
<head>
  <title>Reaction Time Test</title>
  <style>
    #coloured-area {
      min-width: 200px;
      width: 80%;
      height: 200px;
      background-color: blue;
      margin: 50px auto;
      cursor: pointer;
    }

    #message {
      text-align: center;
      font-size: 20px;
      margin: 10px auto;
      border: 0;
      width: max-content;
    }
  </style>
</head>
<body>

  <div id="coloured-area"></div>
  <div id="message"></div>

  <script>
    var Messages = {
      START_GAME: 'Click the coloured box start the game.',
      GAME_STARTED_WAIT_FOR_COLOR_CHANGE: 'Click the coloured box as soon as its colour changes.',
      GAME_STARTED_CLICK_NOW: 'Click now!',
      CLICKED_EARLY: 'You clicked too early. Click the box to restart.',
      RETRY: 'Click the box to try again.'
    };

    var state = {
      message: Messages.START_GAME, // message serves as a flag for the type of current game state.
      startTime: null,
      result: null
    };

    var colouredArea = document.getElementById("coloured-area"),
      message = document.getElementById("message");

    function updateColorAndText() {
      // color decision based on state is written in a single place.

      let color = 'blue';
      switch (state.message) {
        case Messages.START_GAME:
          color = 'blue';
          break;
        case Messages.GAME_STARTED_WAIT_FOR_COLOR_CHANGE:
          color = 'red';
          break;
        case Messages.GAME_STARTED_CLICK_NOW:
          color = 'green';
          break;
        case Messages.CLICKED_EARLY:
          color = 'blue';
          break;
        case Messages.RETRY:
          color = 'blue';
          break;
        default:
          color = 'blue';
          break;
      }

      colouredArea.style.backgroundColor = color;
      message.textContent = state.message;

      if (state.result) {
        message.textContent = `Your reaction time = ${state.result} ms. ` + message.textContent;
      }
    }

    function getRandomDelay() {
      return Math.random() * 3000 + 1000; // Delay between 1 and 4 seconds
    }

    var timeoutRef = null;
    function startGame() {
      state.message = Messages.GAME_STARTED_WAIT_FOR_COLOR_CHANGE;
      state.startTime = null;
      state.result = null;
      updateColorAndText();

      timeoutRef = setTimeout(() => {
        state.startTime = new Date().getTime();
        state.message = Messages.GAME_STARTED_CLICK_NOW;
        updateColorAndText();

        timeoutRef = null;
      }, getRandomDelay());
    }

    colouredArea.onmousedown = function() {
      if (state.message === Messages.GAME_STARTED_CLICK_NOW) {
        state.message = Messages.RETRY;
        state.result = new Date().getTime() - state.startTime;
      } else if (state.message === Messages.GAME_STARTED_WAIT_FOR_COLOR_CHANGE) {
        state.message = Messages.CLICKED_EARLY;
        state.startTime = null;
        state.result = null;
        clearTimeout(timeoutRef);
        timeoutRef = null;
      } else
      // if (state.message === Messages.RETRY
      //   || state.message === Messages.START_GAME
      //   || state.message === Messages.CLICKED_EARLY)
      {
        state.message = Messages.GAME_STARTED_WAIT_FOR_COLOR_CHANGE;
        state.startTime = null;
        state.result = null;
        startGame();
      }
      updateColorAndText();
    }

    updateColorAndText();
  </script>

</body>
</html>


```


Requirement 1: There is a div with id "coloured-area" for showing the coloured area for user to click.
Assumption 1: The div for displaying coloured-area is given the id "coloured-area".

Requirement 2: There is a div with id "message" for displaying text.
Assumption 2: The div for displaying messages is give the id "message".

Requirement 3: On initial load the colour of the coloured-area div is blue and the message is "Click the coloured box start the game.".
Assumption 3: The neutral colour is blue and start game message is "Click the coloured box start the game."

Requirement 4: On clicking the coloured-area, the game starts and the colour of the coloured area changes to 'red' and the message changes to "Click the coloured box as soon as its colour changes.".
Assumption 4: The colour shown when the user has to get ready to click and wait is red and the message instructing the user to do so is "Click the coloured box as soon as its colour changes.".

Requirement 5: If the coloured-area is clicked before 1 second after first click, its colour changes to blue and the message displayed is "You clicked too early. Click the box to restart.". And then if the box is clicked again, the message becomes "Click the coloured box as soon as its colour changes." and the colour of the coloured-area becomes red.
Assumption 5: Colour displayed when user is informed of early click is blue and the message is "You clicked too early. Click the box to restart.". The coloured-area remains red for atleast 1 second after game start. Also, assumption 4 is also to be included.

Requirement 6: After 5 seconds after the first click, the colour of the coloured-area changes to green and if the coloured-area is clicked now, the colour of the coloured area becomes blue and the message displayed matches the regex /`Your reaction time = \d+ ms. Click the box to try again./.
Assumption 6: The format of the message for current reaction time and retry is such that it matches the regex /`Your reaction time = \d+ ms\. Click the box to try again./ and colour shown when the time is displayed is blue.

Requirement 7: coloured-area HTML element has a mousedown listener instead of click listener since the update should be immediately reflected on screen.
Assumption 7: The game is of the nature where update has to be immediately reflected on the screen - as is the case here.
